<?php

/**
 * @file
 * Add custom fields to the SOLR. 
 * Query those fileds. 
 * Display those fields in the search results.
 *
 * We use this technique as a more performant and clearner way than
 *   template.php preprocessing and node_loading().
 */

/**
 * Implements hook_apachesolr_index_document_build().
 *
 * Add custom fields to the solr document
 */
function srmods_apachesolr_index_document_build(ApacheSolrDocument $document, $entity, $entity_type, $env_id) {
  // Add the rendered-to-html string that will replace the snippet.
  // Attempt to do this per-content-type by looking for a function
  // named '_srmods_ENTITYTYPE_snippet'
  
  //watchdog('srmods', 'Raw $entity in _build : ' .  print_r($entity, TRUE));
  //watchdog('srmods', 'Raw $document in _build : ' .  print_r($document));
  //watchdog('srmods', $entity->type .': '. $entity->title);
  if(function_exists('_srmods_' . $entity->type . '_snippet')) {
    $func = '_srmods_' . $entity->type . '_snippet';
    $rendered_snippet = $func($entity);
    // If the function returns something
    if($rendered_snippet){
      $document->setField('ts_rendered_snippet', $rendered_snippet);
    }
  } else { //  Nope, no custom function. Use the default snippet function.
    $document->setField('ts_rendered_snippet', _srmods_default_snippet($entity));
  }

  // Add the rendered-to-html string that will replace the title.
  // Attempt to do this per-content-type by looking for a function
  // named '_srmods_ENTITYTYPE_title'

  if(function_exists('_srmods_' . $entity->type . '_title')) {
    $func = '_srmods_' . $entity->type . '_title';
    $rendered_title = $func($entity);
    if($rendered_title){// If the title has been rendered by a custom function
      $document->setField('ts_rendered_title', $rendered_title);
    }
  }else {// Else use the default title
    $options = array();
    $options['absolute'] = TRUE;
    $options['external'] = TRUE;
    global $base_url;
    $url = $base_url . base_path();
    //watchdog('srmods', 'default title url: ' . $url);
    $title_link = l($entity->title, $url . 'node/' . $entity->nid, $options);
    $document->setMultiValue('ts_rendered_title', l($entity->title, $title_link));
    //watchdog('srmoads', 'default ct title: ' . $title_link);
  }
  // Add the users name to the document.
  // You might not need to write code here.
  // @see https://drupal.org/node/1965932
}

/**
 * Implementation of hook_apachesolr_query_alter($query)
 *
 * Add the newly indexed fields from above to the query result.
 */
function srmods_apachesolr_query_alter($query) {
  $params = array();
  // Add the custom fields
  $params['fl'][] = 'ts_rendered_title';
  $params['fl'][] = 'ts_rendered_snippet';
  $query->addParams($params);

  // Changing the default query parameter from 'or' to 'and'
  // @see http://wiki.apache.org/solr/DisMaxQParserPlugin#mm_.28Minimum_.27Should.27_Match.29
  $query->replaceParam('mm', '100%');
}


/**
 * Implementation of hook_apache_solr_process_results().
 *
 * Alter (theme-esque) the results as they are being displayed.
 *   Essentially, setting the title and snippet.
 */
function srmods_apachesolr_process_results(&$results, DrupalSolrQueryInterface $query) {
  foreach ($results as $id => $result) {
  //dpm($result, '$result');
    //dpm($result, $result['bundle']);
    switch($result['bundle']){

      case 'department':
        $results[$id]['snippet'] = $result['fields']['ts_rendered_snippet'];
        break;

      case 'employee':
        $results[$id]['title'] = $result['fields']['ts_rendered_title'];
        $results[$id]['snippet'] = $result['fields']['ts_rendered_snippet'];
        break;
      default:
        $results[$id]['snippet'] = $result['fields']['ts_rendered_snippet'];
    }
  }
}

/**
 * Render the default html snippet. A content type specific
 * function doesn't exist.
 */
function _srmods_default_snippet ($entity) {
 // watchdog('srmods', 
 //     '<pre>'.$entity->title.': $entity: '
 //     . print_r($entity, 1)
 //     . '</pre>');

  $summary = render(field_view_field('node', $entity, 'body', 'srmods_view_mode'));
  $section = render(field_view_field('node', $entity, 'field_site', 'srmods_view_mode'));
  
  $output = '';
  $output .= '<div class="summary">';
  $output .= strip_tags($summary) . $section;
  $output .= '</div>';

  return $output;
}

/**
 * Render the html snippet for the Department content type.
 */
function _srmods_department_snippet($entity) {
  if($entity->type == 'department'){
    $wrapper = entity_metadata_wrapper('node', $entity);
    $options = array();
    $options['absolute'] = TRUE;
    $dept_name = l($entity->title, 'node/' . $entity->nid, $options);
    $options['html'] = TRUE;
    $options['attributes'] = array();
    $options['attributes']['title'] = t('Departmental directory listing');
    $icon = l('<div class="icons-search-results-ct-department type-icon"></div>', 
      'node/' . $entity->nid, 
      $options);

    $title .= $dept_name;

    $dept_summary = render(field_view_field(
          'node', $entity, 'field_departmentsummary', 'srmods_view_mode'));

    $dept_email = render(field_view_field(
          'node', $entity, 'field_dept_emails', 'srmods_view_mode'));

    $dept_phone = render(field_view_field(
          'node', $entity, 'field_dept_phones', 'srmods_view_mode'));

    $dept_web = render(field_view_field(
          'node', $entity, 'field_dept_websites', 'srmods_view_mode'));

    $dept_location = render(field_view_field(
          'node', $entity, 'field_location', 'srmods_view_mode'));

    $return = $icon . $dept_summary . $dept_email . $dept_phone . $dept_web . $dept_location;

    $return = '<div class="result general">';

    $return .= '<div class="icon">';
    $return .= $icon;
    $return .= '</div>'; // end icon

    $return .= '<div class="title">';
    $return .= $title;
    $return .= '</div>'; // end title

    $return .= '<div class="summary">';
    $return .= $dept_summary;
    $return .= '</div>'; // end summary


    $return .= '<div class="dept-details">';
    $return .= '<div class="first">' . $dept_web . '</div>';
    $return .= '<div class="second">' . $dept_location . '</div>';
    $return .= '<div class="third">' . $dept_phone . '</div>';
    $return .= '<div class="fourth">' . $dept_email . '</div>';
    $return .= '</div>'; // end dept-details

    $return .= '</div>'; // end result



    return $return;

  }else{
    return FALSE;
  }
}

/**
* Render the html snippet for the Event content type.
*/
function _srmods_event_snippet($entity) {

/*********************************************************/

  if($entity->type == 'event'){
    $wrapper = entity_metadata_wrapper('node', $entity);
    $options = array();
    $options['absolute'] = TRUE;
    $dept_name = l($entity->title, 'node/' . $entity->nid, $options);
    $options['html'] = TRUE;
    $options['attributes'] = array();
    $options['attributes']['title'] = t('UW Tacoma Signature Event  listing');
    $icon = l('<div class="icons-search-results-ct-event type-icon"></div>', 
      'node/' . $entity->nid, 
      $options);


    $summary = render(field_view_field(
          'node', $entity, 'body', 'srmods_view_mode'));

    $date = render(field_view_field(
          'node', $entity, 'field_event_date', 'srmods_view_mode'));

    $logo = render(field_view_field(
          'node', $entity, 'field_event_logo', 'srmods_view_mode'));

    $contact = render(field_view_field(
          'node', $entity, 'field_event_contact', 'srmods_view_mode'));

    $location = render(field_view_field(
          'node', $entity, 'field_location_postal_address', 'srmods_view_mode'));


    $return = '<div class="result general">';

    $return .= '<div class="icon">';
    $return .= $icon;
    $return .= '</div>'; // end icon

    //$return .= '<div class="title">';
    //$return .= l($entity->title, 'node/' . $entity->nid, array('absolute' => TRUE));
    //$return .= '</div>'; // end title

    $return .= '<div class="summary">';
    $return .= $summary;
    $return .= '</div>'; // end summary


    $return .= '<div class="dept-details">';
    $return .= '<div class="first">' . $date . '</div>';
    $return .= '<div class="second">' . $location . '</div>';
    $return .= '<div class="third">' . $contact . '</div>';
    $return .= '<div class="fourth">' . $logo . '</div>';
    $return .= '</div>'; // end dept-details

    $return .= '</div>'; // end result



    return $return;

  }else{
    return FALSE;
  }

/*********************************************************/

}


/**
* Render the html snippet for the Location content type.
*/
function _srmods_location_snippet($entity) {

/*********************************************************/

  if($entity->type == 'location'){
    $wrapper = entity_metadata_wrapper('node', $entity);
    $options = array();
    $options['absolute'] = TRUE;
    $dept_name = l($entity->title, 'node/' . $entity->nid, $options);
    $options['html'] = TRUE;
    $options['attributes'] = array();
    $options['attributes']['title'] = t('UWTDownTown retail listing');
    $icon = l('<div class="icons-search-results-ct-location type-icon"></div>', 
      'node/' . $entity->nid, 
      $options);


    $summary = render(field_view_field(
          'node', $entity, 'body', 'srmods_view_mode'));

    $contact = render(field_view_field(
          'node', $entity, 'field_location_phone_number', 'srmods_view_mode'));

    $location = render(field_view_field(
          'node', $entity, 'field_location_location', 'srmods_view_mode'));


    $return = '<div class="result general">';

    $return .= '<div class="icon">';
    $return .= $icon;
    $return .= '</div>'; // end icon

    //$return .= '<div class="title">';
    //$return .= l($entity->title, 'node/' . $entity->nid, array('absolute' => TRUE));
    //$return .= '</div>'; // end title

    $return .= '<div class="summary">';
    $return .= $summary;
    $return .= '</div>'; // end summary


    $return .= '<div class="dept-details">';
    $return .= '<div class="first">' . $location . '</div>';
    $return .= '<div class="third">' . $contact . '</div>';
    $return .= '</div>'; // end dept-details

    $return .= '</div>'; // end result



    return $return;

  }else{
    return FALSE;
  }

/*********************************************************/

}


/**
 * Render the html snippet for the Page content type.
 
function _srmods_page_snippet($entity){
  $output = '';

  $output .= '<div class="icon">';
  $output .= '[ICON]';
  $output .= '</div>';

  $output .= '<div class="title">';
  $output .= '[TEASER/SUMMARY TEXT TEASER/SUMMARY TEXT TEASER/SUMMARY TEXT TEASER/SUMMARY TEXT TEASER/SUMMARY TEXT]';
  $output .= '</div>';

  return $output;
}
*/

/**
 * Helper function to process/render/retrieve values from fields.
 *
 * @param $entity Array A complete entity
 * @param $fields Array Field system names to render
 * @param $view_mode String The view mode to use, defaults to 'default'
 *
 * @return Array An array of rendered values.
 */
function _srmods_get_field_values($entity, $fields, $view_mode = 'default') {

  $return = array();
  foreach($fields as $field) {
    $field_info = field_info_field($field);
    $field_type = $field_info['type'];

    //watchdog('srmods', '<pre>$field_type: ' . $field . ' = '
    //. print_r($field_type, 1)
    //. '</pre>');

    if($field_type == 'text') {

      $return[$field] = render(field_view_field('node', $entity, $field, $view_mode));

    } else if ($field_type == 'field_collection') {
      $return[$field] = _srmods_get_value_from_fc($entity, $field);
    }
  }
  return $return;
}

/**
 * Utility function to return nice arrays of data for our template files to use.
 */
function _srmods_get_value_from_fc($entity, $field) {
  if ($field == 'field_employeeposition') {
    //$wrapper = entity_metadata_wrapper('node', $entity);
    $items = field_get_items('node', $entity, 'field_employeeposition');
    $value = array();
    $position = array();
    foreach($items as $id =>$itemid) {
      $item = field_collection_field_get_entity($itemid);
      // I burnt days trying to figure out the "right" way to do this with
      // wrappers and field_collection_load yadda yadda...I finally gave up.
      $position[$id]['jobtitle'] = $item->field_jobtitle['und'][0]['safe_value'];
      $position[$id]['phone'] = $item->field_workphone['und'][0]['safe_value'];
      // Provide the department title as a link.
      $dept_title = $item->field_department['und']['0']['entity']->title;
      $dept_url = $item->field_department['und']['0']['entity']->field_departmentwebsite['und'][0]['safe_value'];
      $position[$id]['department'] = l($dept_title, $dept_url);
    }

    $value = $position;

  }
  return $value;
}


/**
 * Render the snippet for the Employee content type
 */
function _srmods_employee_snippet($entity){
  if($entity->type == 'employee') {
    // Set up the fields for display in the search results.
    $fields = array();
    $fields[] = 'field_givenname';
    $fields[] = 'field_familyname';
    $fields[] = 'field_honorificsuffix';
    $fields[] = 'field_email';
    $fields[] = 'field_employeeposition';

    // Render the fields
    // @TODO this might be overkill. I think we might be able to just do
    // render(field_view_field());
    $values = _srmods_get_field_values($entity, $fields, 'srmods_view_mode');

    $return  = '<div class="result">';

    $options = array();
    $options['absolute'] = TRUE;
    $dept_name = l($entity->title, 'node/' . $entity->nid, $options);
    // Create the icon with its link
    $options['html'] = TRUE;
    $options['attributes'] = array();
    $options['attributes']['title'] = t('Employee directory listing');
    $icon = l('<div class="icons-search-results-ct-employee type-icon"></div>', 
      'node/' . $entity->nid, 
      $options);
    $return .= '<div class="icon">';
    $return .= $icon;
    $return .= '</div>'; // End icon

    $return .= '<div class="title">';
    $return .= _srmods_employee_title($entity);
    $return .= '</div>'; // end title

    $return .= '<div class="positions">';
    foreach($values['field_employeeposition'] as $id => $position){
      $return .= '<div class="position">';

      $return .= '<div class="first">';
      $return .= $position['jobtitle'];
      $return .= '</div>';

      $return .= '<div class="second">';
      $return .= $position['department'];
      $return .= '</div>';

      $return .= '<div class="third">';
      $return .= $position['phone'];
      $return .= '</div>';

      $return .= '<div class="fourth">';
      $return .= $values['field_email'];
      $return .= '</div>';

      $return .= '</div>'; // end position
    }
    $return .= '</div>'; // end positions
    $return .= '</div>'; // end result

    /*  
        watchdog('srmods',
        '$return: '
        . print_r($return,1)
        .'');   
     */
    return $return;

  }else {
    return FALSE;
  }
}


/**
 * Render the title for the Employee content type
 */
function _srmods_employee_title($entity) {
  if($entity->type == 'employee'){
    /*
       watchdog('srmods',
       '<pre>$entity: '
       . print_r($entity,1)
       .'</pre>');   
     */
    $emp_wrapper = entity_metadata_wrapper('node', $entity);
    $givenname = $emp_wrapper->field_givenname->value();
    $familyname = $emp_wrapper->field_familyname->value();
    $suffix = $emp_wrapper->field_honorificsuffix->value();

    $title = $givenname . ' ' . $familyname;
    if(!empty($suffix)){
      $title .= ' ' . $suffix;
    }

    $options = array();
    $options['absolute'] = TRUE;
    $title = l($title, 'node/' . $entity->nid, $options);

    /*  
        watchdog('srmods',
        '<pre>employee title link: '
        . print_r($title,1)
        .'</pre>');   
     */
    return $title;
  }else {
    return FALSE;
  }
}


/**
 * Add an additional view mode.
 */
function srmods_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['srmods_view_mode'] = array(
      'label' => t('Search Results Modified'),
      'custom settings' => TRUE,
      );
}

/**
 * Assigns a readable name to your custom solr field
 *
 * @param array $map
 */
function srmods_apachesolr_field_name_map_alter(array &$map) {
  $map['ts_rendered_snippet'] = t('Rendered Snippet (custom)');
  $map['ts_rendered_title'] = t('Rendered Title (custom)');
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function srmods_form_facetapi_multiselect_form_alter(&$form, &$form_state) {
  // Add the JavaScript and CSS for the library itself. This assumes you are
  // using the Libraries module (http://drupal.org/project/libraries) and that
  // you've put the external library in sites/all/libraries/jquery.multiselect.
  $path = libraries_get_path('jquery.multiselect');
  $form['#attached']['js'][] = $path . '/jquery.multiselect.min.js';
  $form['#attached']['css'][] = $path . '/jquery.multiselect.css';

  // Add a custom JavaScript file which will trigger the jQuery MultiSelect
  // widget on the correct form elements.
  $form['#attached']['js'][] = drupal_get_path('module', 'srmods') . '/srmods.facetapi.multiselect.js';
  // Modify the submit button value
    //dpm($form['#facetapi_multiselect']['facet_name'], '$form');
  switch ($form['#facetapi_multiselect']['facet_name']) {
    case 'im_field_categories':
    $form['submit']['#value'] = t('Apply category filter');
    break;
    case 'bundle_name':
    $form['submit']['#value'] = t('Apply content type filter');
    break;
    case 'changed':
    $form['submit']['#value'] = t('Apply updated date filter');
    break;
    case 'im_field_site':
    $form['submit']['#value'] = t('Apply section filter');
    break;
    default:
    $form['submit']['#value'] = t('Apply filters');
  }
  // Provide pretty names for the filters
  // Get the options
  $options = $form['facets']['#options'];
  foreach ($options as $key => $option) {
    // Get the key value out from the bundle
    $keyvalue = str_replace('bundle:', '', $key);
    // If the keyvalue matches the option value, then we know
    // the option value being displayed is lowercase and 'ugly'.
    // If this is the case, make it 'pretty'.
    if ($keyvalue == $option) {
      $pretty = ucfirst($option);
      $pretty = str_replace('_', ' ', $pretty);
      $form['facets']['#options'][$key] = $pretty;
    }
  }
}

/**
 * Implementes hook_form_FORM_ID_alter().
 *
 * Make some UI changes to the apache solr search form.
 */
function srmods_form_apachesolr_search_custom_page_search_form_alter(&$form, &$form_state, $form_id){
  $form['basic']['keys']['#title'] = 'Search terms';
}
